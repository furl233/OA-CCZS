{"remainingRequest":"D:\\项目\\new-app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\项目\\new-app\\src\\pages\\Administrator\\components\\Humansource.vue?vue&type=template&id=8b547cd6&","dependencies":[{"path":"D:\\项目\\new-app\\src\\pages\\Administrator\\components\\Humansource.vue","mtime":1609834098900},{"path":"D:\\项目\\new-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\项目\\new-app\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\项目\\new-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\项目\\new-app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}